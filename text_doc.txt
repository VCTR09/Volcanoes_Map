Данное приложение создано с использованием языка Python и библиотеки Folium.
Так же используется библиотека Pandas.

В приложении 3 слоя: 1-й слой это basemap, сами очертания стран и континентов, 2-й слой это polygon layer, 
где цвет указывает на количество населения в той или иной стране, 3-й слой point layer с точками на карте 
указывающими местоположение вулканов. Карта интерактивная - слои можно включать или выключать.

Так же присутствуют всплывающие окна с названиями вулканов, их высотой и кликабельными 
ссылками на них в Google.


Создание:

1. Импортируем Folium и создаем объект map класса Map с тремя параметрами (map = folium.Map). стр.25
- location (широта, долгота) - можно выбрать где будет открыта наша карта, 
- zoom_start - выбираем стартовое приближение,
- tiles - ответсвенен за сам внешний вид 1-го слоя
* Сохраняем нашу карту в формате html   map.save("Map_html_popup_advanced.html")   стр.43

2. Добавляем точки на карту.
* Создаем FeatureGroup    fgv = folium.FeatureGroup(name="Volcanoes")   стр.26
FeatureGroup позволяет добавить множество особенностей (features), таких как: Marker, CircleMarker, GeoJson layer, итд.
* Используем метод add_child для добавления объекта (точек) к существующему объекту (карта).  стр.30
* Используем объект CircleMarker с аргументами (положение, цвет, прозрачность, и т.д.) библиотеки Folium 
для создания точек на карте.
!! CircleMarker позволяет создавать всплывающие окна при нажатии на точку на карте.
* Делаем    map.add_child(fgv)   стр.39

3. Добавляем координаты всех вулканов из Volcanoes.txt на карту в виде точек.
* Импортируем библиотеку pandas     data = pandas.read_csv("Volcanoes.txt") стр.4
* Используем цикл for для итерации через структуру данных (dataframe). 
Для этого создаем 2 списка: lat & lon (работа со списком проще и быстрее, чем с dataframe series). стр. 5, 6
* Производим итерации цикла for, каждый раз извлекая широту и долготу каждго из вулканов.
for lt, ln in zip(lat, lon):   стр.28
!! Функция zip нужна для итерации через 2 списка одновременно.

4. Создаем динамические всплывающие окна (popup windows)
* Создаем 2 дополнительных списка elev & name - высота и названия вулканов.  стр. 7,8
* Итерируем через все 4 списка   for lt, ln, el, name in zip(lat, lon, elev, name):  

5. Применим HTML для всплывающих окон, а так же Google ссылки.
* Разместим ссылки во всплывающем окне. Приведенный ниже код создаст всплывающее окно с названием 
вулкана в качестве ссылки, которая при нажатии выполняет поиск Google для данного конкретного вулкана:
html = """
Volcano name:<br>
<a href="https://www.google.com/search?q=%%22%s%%22" target="_blank">%s</a><br>
Height: %s m
"""
!! Символы %s являются заполнителями, в которые будут вставлены строковые переменные.
!! Здесь строковые переменные name и el вставляются в переменную html:
iframe = folium.IFrame(html=html % (name, name, el)   стр.29

* Так выглядит теперь цикл for:  
for lt, ln, el, name in zip(lat, lon, elev, name):
    iframe = folium.IFrame(html=html % (name, name, el), width=200, height=100)
    fgv.add_child(folium.CircleMarker(location=[lt, ln], radius=6, popup=folium.Popup(iframe), fill_color=color_producer(el), color='grey', fill_opacity=0.7))


